local ElixirLib = {}

-- === CORES DEFINIDAS AQUI PARA FÁCIL MANUTENÇÃO ===
local Colors = {
    MainBackgroundStart = Color3.fromRGB(0, 255, 0),      -- Neon verde (início degrade)
    MainBackgroundEnd = Color3.fromRGB(25, 25, 25),       -- Escuro (fim degrade)
    Border = Color3.fromRGB(0, 255, 0),                   -- Verde neon da borda
    TopBarStart = Color3.fromRGB(0, 255, 0),              -- Neon verde topbar (início degrade)
    TopBarEnd = Color3.fromRGB(30, 30, 30),                -- Escuro topbar (fim degrade)
    TitleText = Color3.fromRGB(200, 200, 255),             -- Cor do texto do título
    LeftPanelBackground = Color3.fromRGB(28, 28, 28),      -- Fundo painel esquerdo
    FloatButtonBackground = Color3.fromRGB(20, 20, 20),    -- Fundo botão flutuante
}

function ElixirLib:MakeWindow(config)
    local Window = {}

    -- Serviços
    local Players = game:GetService("Players")
    local UserInputService = game:GetService("UserInputService")
    local player = Players.LocalPlayer
    local playerGui = player:WaitForChild("PlayerGui")

    -- Criar ou obter ScreenGui
    local screenGui = playerGui:FindFirstChild("CustomUI") or Instance.new("ScreenGui")
    screenGui.Name = "CustomUI"
    screenGui.ResetOnSpawn = false
    screenGui.IgnoreGuiInset = true
    screenGui.Parent = playerGui

    -- Detecta se é mobile para ajustar tamanho inicial
    local isMobile = UserInputService.TouchEnabled and not UserInputService.KeyboardEnabled

    -- Tamanhos padrão e mobile
    local defaultSize = UDim2.new(0, 700, 0, 400)
    local mobileSize = UDim2.new(0, 350, 0, 200)

    -- Frame principal
    local mainFrame = Instance.new("Frame")
    mainFrame.Name = "MainUIFrame"
    mainFrame.Size = isMobile and mobileSize or defaultSize
    mainFrame.Position = UDim2.new(0.5, -mainFrame.Size.X.Offset/2, 0.2, 0)
    mainFrame.BackgroundColor3 = Colors.MainBackgroundEnd -- fallback degrade
    mainFrame.Parent = screenGui
    mainFrame.ClipsDescendants = true
    Instance.new("UICorner", mainFrame).CornerRadius = UDim.new(0, 12)
    local mainStroke = Instance.new("UIStroke", mainFrame)
    mainStroke.Color = Colors.Border

    -- Degrade fundo principal
    local mainGradient = Instance.new("UIGradient")
    mainGradient.Color = ColorSequence.new({
        ColorSequenceKeypoint.new(0, Colors.MainBackgroundStart),
        ColorSequenceKeypoint.new(1, Colors.MainBackgroundEnd)
    })
    mainGradient.Parent = mainFrame

    -- TopBar
    local topBar = Instance.new("Frame")
    topBar.Size = UDim2.new(1, 0, 0, 40)
    topBar.BackgroundColor3 = Colors.TopBarEnd -- fallback degrade
    topBar.BorderSizePixel = 0
    topBar.Parent = mainFrame
    Instance.new("UICorner", topBar).CornerRadius = UDim.new(0, 12)

    -- Degrade topBar
    local topGradient = Instance.new("UIGradient")
    topGradient.Color = ColorSequence.new({
        ColorSequenceKeypoint.new(0, Colors.TopBarStart),
        ColorSequenceKeypoint.new(1, Colors.TopBarEnd)
    })
    topGradient.Parent = topBar

    -- Título
    local titleLabel = Instance.new("TextLabel")
    titleLabel.Size = UDim2.new(1, -60, 1, 0)
    titleLabel.Position = UDim2.new(0, 10, 0, 0)
    titleLabel.BackgroundTransparency = 1
    titleLabel.Text = config.Name or "Elixir Client"
    titleLabel.TextColor3 = Colors.TitleText
    titleLabel.Font = Enum.Font.GothamBold
    titleLabel.TextSize = 20
    titleLabel.TextXAlignment = Enum.TextXAlignment.Left
    titleLabel.Parent = topBar

    -- Botão minimizar
    local minimizeButton = Instance.new("ImageButton")
    minimizeButton.Size = UDim2.new(0, 30, 0, 30)
    minimizeButton.Position = UDim2.new(1, -40, 0, 5)
    minimizeButton.BackgroundTransparency = 1
    minimizeButton.Image = "rbxassetid://10738425363"
    minimizeButton.Parent = topBar
    Instance.new("UICorner", minimizeButton).CornerRadius = UDim.new(1, 0)

    -- Divider
    local divider = Instance.new("Frame")
    divider.Size = UDim2.new(1, -20, 0, 2)
    divider.Position = UDim2.new(0, 10, 0, 40)
    divider.BackgroundColor3 = Colors.Border
    divider.BorderSizePixel = 0
    divider.Parent = mainFrame
    Instance.new("UICorner", divider).CornerRadius = UDim.new(1, 0)

    -- Conteúdo principal
    local contentFrame = Instance.new("Frame")
    contentFrame.Size = UDim2.new(1, 0, 1, -42)
    contentFrame.Position = UDim2.new(0, 0, 0, 42)
    contentFrame.BackgroundTransparency = 1
    contentFrame.Parent = mainFrame

    -- Painel esquerdo
    local leftPanel = Instance.new("Frame")
    leftPanel.Size = UDim2.new(0, 180, 1, 0)
    leftPanel.BackgroundColor3 = Colors.LeftPanelBackground
    leftPanel.Parent = contentFrame
    Instance.new("UICorner", leftPanel).CornerRadius = UDim.new(0, 10)
    local leftStroke = Instance.new("UIStroke", leftPanel)
    leftStroke.Color = Colors.Border

    -- Painel direito (transparente)
    local rightPanel = Instance.new("Frame")
    rightPanel.Size = UDim2.new(1, -180, 1, 0)
    rightPanel.Position = UDim2.new(0, 180, 0, 0)
    rightPanel.BackgroundTransparency = 1
    rightPanel.Parent = contentFrame

    -- Notificação personalizada (via módulo externo)
    local function showNotification(message)
        local notification = loadstring(game:HttpGet('https://raw.githubusercontent.com/9menta/tests/refs/heads/main/notification.lua'))()
        notification({
            Title = 'Minimized',
            Text = message,
            Image = 'rbxassetid://72671288986713',
            Duration = 10
        })
    end

    -- Controle de minimização e notificação só 1 vez
    local isMinimized = false
    local notificationShown = false

    local function toggleUI()
        isMinimized = not isMinimized
        mainFrame.Visible = not isMinimized
        if isMinimized and not notificationShown then
            showNotification("Pressione RightShift ou use o botão flutuante para abrir.")
            notificationShown = true
        end
    end

    -- Hotkey para minimizar (RightShift)
    UserInputService.InputBegan:Connect(function(input, gameProcessed)
        if not gameProcessed and input.KeyCode == Enum.KeyCode.RightShift then
            toggleUI()
        end
    end)

    minimizeButton.MouseButton1Click:Connect(toggleUI)

    -- Drag do frame principal
    local draggingMain = false
    local dragInputMain, mousePosMain, framePosMain

    local function updateMain(input)
        local delta = input.Position - mousePosMain
        mainFrame.Position = UDim2.new(framePosMain.X.Scale, framePosMain.X.Offset + delta.X,
            framePosMain.Y.Scale, framePosMain.Y.Offset + delta.Y)
    end

    topBar.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            draggingMain = true
            mousePosMain = input.Position
            framePosMain = mainFrame.Position
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    draggingMain = false
                end
            end)
        end
    end)

    UserInputService.InputChanged:Connect(function(input)
        if input == dragInputMain and draggingMain then
            updateMain(input)
        end
    end)

    topBar.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
            dragInputMain = input
        end
    end)

    -- Botão flutuante minimizar
    local floatButton = Instance.new("ImageButton")
    floatButton.Name = "FloatingMinimizeButton"
    floatButton.Size = UDim2.new(0, 40, 0, 40)
    floatButton.Position = UDim2.new(0, 20, 0.5, -20)
    floatButton.BackgroundColor3 = Colors.FloatButtonBackground
    floatButton.Image = "rbxassetid://72671288986713"
    floatButton.Parent = screenGui

    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, 100)
    corner.Parent = floatButton

    local stroke = Instance.new("UIStroke")
    stroke.Color = Colors.Border
    stroke.Thickness = 2
    stroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
    stroke.Parent = floatButton

    -- Drag do botão flutuante
    local draggingFloat = false
    local dragInputFloat, dragStartFloat, startPosFloat

    local function updateFloat(input)
        local delta = input.Position - dragStartFloat
        floatButton.Position = UDim2.new(startPosFloat.X.Scale, startPosFloat.X.Offset + delta.X,
            startPosFloat.Y.Scale, startPosFloat.Y.Offset + delta.Y)
    end

    floatButton.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            draggingFloat = true
            dragStartFloat = input.Position
            startPosFloat = floatButton.Position
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    draggingFloat = false
                end
            end)
        end
    end)

    floatButton.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
            dragInputFloat = input
        end
    end)

    UserInputService.InputChanged:Connect(function(input)
        if input == dragInputFloat and draggingFloat then
            updateFloat(input)
        end
    end)

    floatButton.MouseButton1Click:Connect(toggleUI)

    -- === REDIMENSIONAMENTO DO PAINEL PELO CANTO INFERIOR DIREITO ===
    local resizeFrame = Instance.new("Frame")
    resizeFrame.Size = UDim2.new(0, 20, 0, 20)
    resizeFrame.Position = UDim2.new(1, -20, 1, -20)
    resizeFrame.AnchorPoint = Vector2.new(1, 1)
    resizeFrame.BackgroundColor3 = Colors.Border
    resizeFrame.Parent = mainFrame
    resizeFrame.ZIndex = 10
    resizeFrame.Active = true

    local draggingResize = false
    local dragStartPos
    local startSize

    resizeFrame.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            draggingResize = true
            dragStartPos = input.Position
            startSize = mainFrame.Size
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    draggingResize = false
                end
            end)
        end
    end)

    resizeFrame.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement then
            if draggingResize then
                local delta = input.Position - dragStartPos
                local newWidth = math.clamp(startSize.X.Offset + delta.X, 300, 1200)
                local newHeight = math.clamp(startSize.Y.Offset + delta.Y, 200, 800)
                mainFrame.Size = UDim2.new(0, newWidth, 0, newHeight)
            end
        end
    end)

    return Window
end

return ElixirLib
